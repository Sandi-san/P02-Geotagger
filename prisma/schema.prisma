// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  firstName String?
  lastName  String?

  email    String @unique
  password String?  //OAuth Users don't have password

  image   String?

  guessTokens Int @default(10)

  role String @default("user") //or "admin" for admins

  //User's unique reset token for password
  resetToken  String?
  resetTokenExpiry DateTime?

  Location Location[]
  Guess Guess[]

  UserAction UserAction[]

  @@map("users")
}

model Location {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  image   String?
  lat Float
  lon Float

  address String? //for autocorrect?

  //FOREIGN KEY
  userId Int
  user   User  @relation(fields: [userId], references: [id])

  Guess Guess[]
  
  @@map("locations")
}

model Guess {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lat Float
  lon Float

  errorDistance Float //distance from location in meters 

  //FOREIGN KEY
  userId Int
  user   User  @relation(fields: [userId], references: [id])
  locationId Int
  location Location  @relation(fields: [locationId], references: [id])

  @@map("guesses")
}

model UserAction {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  action String //click, scroll, added value, changed value, removed value
  type String //Component type: Button, Textbox, Dropdown, Checkbox, Radio
  newValue Int?
  url String //Url where action was saved

  //FOREIGN KEY
  userId Int
  user   User  @relation(fields: [userId], references: [id])  

  //indexes: increases return speed for specific queries
  @@index(fields: [createdAt, userId]) 

  @@map("userActions")
}

//TODO: set up database
